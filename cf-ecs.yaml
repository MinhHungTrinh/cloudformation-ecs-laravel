AWSTemplateFormatVersion: 2010-09-09

Description: >
  A stack for deploying containerized applications in AWS ECS with Fargate. 
  Including a public facing load balancer to register the services.

Parameters:

  EnvType:
    Description: Environment type.
    Default: dev
    Type: String
    AllowedValues: [prod, dev]
    ConstraintDescription: must specify prod or dev.

  LoadBalancerName: 
    Description: ALB Name
    Type: String

  LoadBalancerSubnetId:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at two subnets in your selected VPC.

  LoadBalancerSecurityGroup:
    Description: An existing security group ID.
    Type: List<AWS::EC2::SecurityGroup::Id>

  LoadBalancerHealthCheckPath:
    Type: String
    Description: The path for the Application Load Balancer health check.
    Default: /
    MinLength: 1
    MaxLength: 255
    ConstraintDescription: Value must be between 1 and 255 characters

  EcsClusterName: 
    Description: ECS Cluster Name.
    Type: String
  
  EcsServiceName: 
    Description: ECS Service Name. (Optional)
    Type: String

  EcsVpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.

  EcsSubnetId:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at two subnets in your selected VPC.

  EcsSecurityGroup:
    Description: An existing security group ID for ECS Services.
    Type: String

  CloudWatchLogGroup: 
    Description: CloudWatch Log Group Name.
    Type: String
  
  ContainerLogRetentionInDays:
    Type: Number
    Description: Retention settings to specify how long log events are kept in CloudWatch Logs. Expired log events get deleted automatically.
    Default: 7

  ApplicationDomainName: 
    Description: Domain Name for the application
    Type: String

  SeedDockerImageLaravel:
    Type: String
    Default: php:7.2-fpm-alpine
    Description: Initial image before CodePipeline is executed. Existing application images in ECR should override this parameter

  SeedDockerImageNginx:
    Type: String
    Default: nginx:alpine
    Description: Initial image before CodePipeline is executed. Existing application images in ECR should override this parameter

  ImageRepoLaravel:
    Description: ECR Repositories Name for Laravel
    Type: String

  ImageRepoNginx:
    Description: ECR Repositories Name for Nginx web server
    Type: String

  MaxTaggedContainerImagesToRetain:
    Type: Number
    Description: The number of tagged container images to retain before expiring
    MinValue: 1
    MaxValue: 100
    ConstraintDescription: Value must be between 1 and 100
    Default: 20

  DaysToRetainUntaggedContainerImages:
    Type: Number
    Description: The number days to retain untagged container images before expiring
    MinValue: 1
    MaxValue: 100
    ConstraintDescription: Value must be between 1 and 100
    Default: 7

  TaskMinContainerCount:
    Type: Number
    Description: Minimum number of containers to run for the service
    Default: 1
    MinValue: 1
    ConstraintDescription: Value must be at least one

  TaskMaxContainerCount:
    Type: Number
    Description: Maximum number of containers to run for the service when auto scaling out
    Default: 2
    MinValue: 1
    ConstraintDescription: Value must be at least one

  # Scaling params
  ServiceScaleEvaluationPeriods:
    Description: The number of periods over which data is compared to the specified threshold
    Type: Number
    Default: 2
    MinValue: 2

  ServiceCpuScaleOutThreshold:
    Type: Number
    Description: Average CPU value to trigger auto scaling out
    Default: 50
    MinValue: 0
    MaxValue: 100
    ConstraintDescription: Value must be between 0 and 100

  ServiceCpuScaleInThreshold:
    Type: Number
    Description: Average CPU value to trigger auto scaling in
    Default: 25
    MinValue: 0
    MaxValue: 100
    ConstraintDescription: Value must be between 0 and 100
  
Conditions:
  CreateProdResources: !Equals [!Ref EnvType, prod]
  CreateDevResources: !Equals [!Ref EnvType, dev]
  HasEcsServiceName: !Not [ !Equals ["", !Ref EcsServiceName] ]

Resources:

  # Simple Amazon ECR Lifecycle Policies to try and reduce storage costs
  # See: https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
  EcrNginxRepository:
    Type: AWS::ECR::Repository
    # DeletionPolicy: Retain
    Properties:
      RepositoryName: !Ref ImageRepoNginx
      LifecyclePolicy:
        LifecyclePolicyText: !Sub
          - |
            {
              "rules": [
                {
                  "rulePriority": 1,
                  "description": "Only keep untagged images for ${DaysToRetainUntaggedContainerImages} days",
                  "selection": {
                    "tagStatus": "untagged",
                    "countType": "sinceImagePushed",
                    "countUnit": "days",
                    "countNumber": ${DaysToRetainUntaggedContainerImages}
                  },
                  "action": { "type": "expire" }
                },
                {
                  "rulePriority": 2,
                  "description": "Keep only ${MaxTaggedContainerImagesToRetain} tagged images, expire all others",
                  "selection": {
                    "tagStatus": "tagged",
                    "tagPrefixList": [ "${EnvironmentName}" ],
                    "countType": "imageCountMoreThan",
                    "countNumber": ${MaxTaggedContainerImagesToRetain}
                  },
                  "action": { "type": "expire" }
                }
              ]
            }
          - DaysToRetainUntaggedContainerImages: !Ref DaysToRetainUntaggedContainerImages
            MaxTaggedContainerImagesToRetain: !Ref MaxTaggedContainerImagesToRetain
            EnvironmentName: !Ref EnvType

  # Simple Amazon ECR Lifecycle Policies to try and reduce storage costs
  # See: https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
  EcrLaravelRepository:
    Type: AWS::ECR::Repository
    # DeletionPolicy: Retain
    Properties:
      RepositoryName: !Ref ImageRepoLaravel
      LifecyclePolicy:
        LifecyclePolicyText: !Sub
          - |
            {
              "rules": [
                {
                  "rulePriority": 1,
                  "description": "Only keep untagged images for ${DaysToRetainUntaggedContainerImages} days",
                  "selection": {
                    "tagStatus": "untagged",
                    "countType": "sinceImagePushed",
                    "countUnit": "days",
                    "countNumber": ${DaysToRetainUntaggedContainerImages}
                  },
                  "action": { "type": "expire" }
                },
                {
                  "rulePriority": 2,
                  "description": "Keep only ${MaxTaggedContainerImagesToRetain} tagged images, expire all others",
                  "selection": {
                    "tagStatus": "tagged",
                    "tagPrefixList": [ "${EnvironmentName}" ],
                    "countType": "imageCountMoreThan",
                    "countNumber": ${MaxTaggedContainerImagesToRetain}
                  },
                  "action": { "type": "expire" }
                }
              ]
            }
          - DaysToRetainUntaggedContainerImages: !Ref DaysToRetainUntaggedContainerImages
            MaxTaggedContainerImagesToRetain: !Ref MaxTaggedContainerImagesToRetain
            EnvironmentName: !Ref EnvType

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EcsClusterName

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref CloudWatchLogGroup
      RetentionInDays: !Ref ContainerLogRetentionInDays

  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - CloudwatchLogsGroup
      - EcsTaskExecutionRole
    Properties:
      Family: !Join ['', [!Ref 'AWS::StackName', -laravel]]
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      Cpu: 256
      Memory: 512
      # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html
      # TaskRoleArn: !GetAtt EcsTaskRole.Arn 
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      ContainerDefinitions:
      - Name: php-laravel
        Essential: 'true'
        Image: !Ref SeedDockerImageLaravel
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: php-laravel
      - Name: nginx
        Essential: 'true'
        Image: !Ref SeedDockerImageNginx
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudwatchLogsGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: nginx
        PortMappings:
        - ContainerPort: 80
        VolumesFrom:
        - SourceContainer: php-laravel

  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref LoadBalancerName
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: deletion_protection.enabled
        Value: 'false'
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      - Key: routing.http2.enabled
        Value: 'true'
      - Key: access_logs.s3.enabled
        Value: 'false'
      - Key: access_logs.s3.prefix
        Value: !Ref AWS::NoValue
      Subnets: !Ref 'LoadBalancerSubnetId'
      SecurityGroups: !Ref 'LoadBalancerSecurityGroup'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      LoadBalancerArn: !Ref 'ECSALB'
      Port: '80'
      Protocol: HTTP

  ECSALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: ALBListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'ALBListener'
      Priority: 1

  HttpsCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CreateProdResources
    Properties: 
      DomainName: !Ref ApplicationDomainName
      DomainValidationOptions:
        - DomainName: !Ref ApplicationDomainName
          ValidationDomain: !Ref ApplicationDomainName
      ValidationMethod: DNS

  ALBHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: CreateProdResources
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      LoadBalancerArn: !Ref 'ECSALB'
      Port: '443'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref HttpsCertificate

  ECSALBHttpsListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: CreateProdResources
    DependsOn: ALBHttpsListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'ALBListener'
      Priority: 1

  ECSTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Ref LoadBalancerHealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Ref 'LoadBalancerName'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      TargetType: ip
      VpcId: !Ref 'EcsVpcId'

  service:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref 'ECSCluster'
      LaunchType: FARGATE
      DesiredCount: !Ref TaskMinContainerCount
      LoadBalancers:
      - ContainerName: nginx
        ContainerPort: '80'
        TargetGroupArn: !Ref 'ECSTG'
      NetworkConfiguration: 
        AwsvpcConfiguration: 
          AssignPublicIp: DISABLED
          SecurityGroups: [!Ref 'EcsSecurityGroup']
          Subnets: !Ref 'EcsSubnetId'
      ServiceName: !If [ HasEcsServiceName, !Ref EcsServiceName, !Ref 'AWS::NoValue' ]
      TaskDefinition: !Ref 'taskdefinition'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: !If [CreateProdResources, 50, 0]

  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: 
      - service
      - AutoscalingRole
    Properties:
      MinCapacity: !Ref TaskMinContainerCount
      MaxCapacity: !Ref TaskMaxContainerCount
      ResourceId: !Join ['', [service/, !Ref 'ECSCluster', /, !GetAtt [service, Name]]]
      RoleARN: !GetAtt [AutoscalingRole, Arn]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ServiceScalingTarget
    Properties:
      PolicyName: ScaleOutPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: 1
            MetricIntervalLowerBound: 0

  ServiceScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ServiceScalingTarget
    Properties:
      PolicyName: ScaleInPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: -1
            MetricIntervalUpperBound: 0

  ServiceScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - service
      - ServiceScaleOutPolicy
    Properties:
      EvaluationPeriods: !Ref ServiceScaleEvaluationPeriods
      Statistic: Average
      TreatMissingData: notBreaching
      Threshold: !Ref ServiceCpuScaleOutThreshold
      AlarmDescription: Alarm to add capacity if CPU is high
      Period: 60
      AlarmActions:
        - !Ref ServiceScaleOutPolicy
      Namespace: AWS/ECS
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt service.Name
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  ServiceScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - service
      - ServiceScaleInPolicy
    Properties:
      EvaluationPeriods: !Ref ServiceScaleEvaluationPeriods
      Statistic: Average
      TreatMissingData: notBreaching
      Threshold: !Ref ServiceCpuScaleInThreshold
      AlarmDescription: Alarm to reduce capacity if container CPU is low
      Period: 300
      AlarmActions:
        - !Ref ServiceScaleInPolicy
      Namespace: AWS/ECS
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt service.Name
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization

  # ALB500sAlarmScaleUp:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     EvaluationPeriods: 1
  #     Statistic: Sum
  #     Threshold: !If [CreateProdResources, '10', '10000']
  #     AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
  #     Period: 60
  #     AlarmActions: [!Ref 'ServiceScaleOutPolicy']
  #     Namespace: AWS/ApplicationELB
  #     Dimensions:
  #       - Name: LoadBalancer
  #         Value: !GetAtt 
  #           - ECSALB
  #           - LoadBalancerFullName
  #     ComparisonOperator: GreaterThanThreshold
  #     MetricName: HTTPCode_ELB_5XX_Count

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms', 'cloudwatch:PutMetricAlarm',
              'ecs:DescribeServices', 'ecs:UpdateService']
            Resource: '*'
            
Outputs:
  ecsservice:
    Value: !Ref 'service'
  ecscluster:
    Value: !Ref 'ECSCluster'
  ECSALB:
    Description: Your ALB DNS URL
    Value: !Join ['', [!GetAtt [ECSALB, DNSName]]]
  taskdef:
    Value: !Ref 'taskdefinition'